# EEPROM-Programmer
GPIO and EEPROM programming API designed for the BeagleBone Black. 
EEPROM-Prog program uses both interfaces to program data into an EEPROM.

--ABOUT
The GPIO interface allows for interfacing GPIO pins used on the BeagleBone Black to be used in general programs. It allows for
the changing of GPIO characterstics in your code without having to manipulate the state of the GPIO pins through the terminal.

The Prog interface builds on the GPIO interface and allows for the interfacing of an EEPROM programmer that uses a serial input
and parallel load hardware interface using shift registers. This then allows the writing of a certain value to a given address
by parallel loading the address and data values onto the EEPROM.

The hardware being used is a AT28C16 (http://cva.stanford.edu/classes/cs99s/datasheets/at28c16.pdf) and uses a serial loading
framework to load values into the 11-bit address and the 8-bit data. The GPIO and Prog classes created can be customized to 
accommodate any EEPROM that uses serial-loading. Specifically, any hardware that takes a clock, clear, and data pin is supported
by this program.

Album with pictures of hardware used: https://imgur.com/a/81xC4c5
The EEPROM-Prog program uses the BBB GPIO Device framework and uses 7 pins in total.
  - 3 GPIO pins for the Data register's clear(grey), clock(white), and data(blue) pins.
  - 3 GPIO pins for the Address registers's clear(grey), clock(white), and data(blue) pins.
  - 1 GPIO pin for the Write(yellow) pin which locks the Data in the bit Pattern dictated by the address

If one wishes to accomodate the main.cpp program that I have written for my own uses, the pins that are to be used can be 
changed in the main.cpp when constructing the Prog objects. A data Prog object and a address Prog object, GPIO write pin must 
also be specified. If there are not enough available GPIO pins on the BBB, a tutorial on how to free up more pins is included 
below in the README 


--COMPILING and RUNNING

Typing make will compile the program into an executable called "EEPROM-Prog"

An example is as follows:

$ make

A datafile must be passed as an arguement that has the address values and the data files that are to be programmed.
An example of these files can be found in the Example_Files directory.

running with the my executable compiled:

$ ./EEPROM-Prog [datafile.txt]

--FREEING UP GPIO PINS THROUGH THE DEVICE-OVERLAYS
- For 3.X Linux Kernel images for BBB
      ***CAUTION YOUR BBB MIGHT NOT BOOT IF YOU DISABLE THE WRONG THINGS***
      
Available GPIO pins must be input for the program to use. If they are not enough you must free them up through the disabling
of device-overlays. 
To do this first access the file uEnv.txt. It is located in /boot/ directory. 
In this file you will see a line like this:

##BeagleBone Black: HDMI (Audio/Video) disabled:

##10 dtb=am335x-boneblack-emmc-overlay.dtb

Uncomment the second line here. Make sure that only this line is ucommented.
Uncommenting this device-overlay will free up pins used by the HDMI. If you uncomment this line you will not be able to use
HDMI capabilities.

If you uncomment the device-overlay that disables the onboard eMMC memory, you device will not boot and will have to be boot
from an SSD or reinstall your image. 

-- CONTACT
Any question or comments can be directed to lukekryger98@gmail.com
